package generate_converters

import (
	"fmt"
	"sort"
	"strings"

	"github.com/Silicon-Ally/etap2sf/conv"
	"github.com/Silicon-Ally/etap2sf/conv/conversionsettings"
	"github.com/Silicon-Ally/etap2sf/conv/etapfields"
	"github.com/Silicon-Ally/etap2sf/etap"
	"github.com/Silicon-Ally/etap2sf/etap/inference/customfields"
	"github.com/Silicon-Ally/etap2sf/etap/inference/standardfields"
	"github.com/Silicon-Ally/etap2sf/salesforce"
	"github.com/Silicon-Ally/etap2sf/salesforce/generated/sfenterprise"
)

func eTapToSalesforceFieldMappings(eot etap.ObjectType, sot salesforce.ObjectType) ([]*conv.FieldMapping, []*conv.FieldMapping, error) {
	s, err := getStandardFields(eot, sot)
	if err != nil {
		return nil, nil, fmt.Errorf("getting standard fields for %q to %q: %w", eot, sot, err)
	}
	c, err := getCustomFields(eot)
	if err != nil {
		return nil, nil, fmt.Errorf("getting custom fields for %q to %q: %w", eot, sot, err)
	}
	return s, c, nil
}

func getCustomFields(eot etap.ObjectType) ([]*conv.FieldMapping, error) {
	cfs, err := customfields.GetCustomFields()
	if err != nil {
		return nil, fmt.Errorf("getting custom fields for %q: %w", eot, err)
	}
	grouped := cfs.GroupedByETapObject()
	customFields := grouped[eot]
	result := []*conv.FieldMapping{}
	for _, cf := range customFields {
		if *cf.GeneratedDefinition.Name == "Data Source" {
			continue
		}
		p := &etapfields.CustomField{
			Delegate:            newPtr(cf),
			DefinedValuesFnName: fmt.Sprintf("GetDefinedValuesFor%s", eot.String()),
		}
		result = append(result, &conv.FieldMapping{
			In:  p, // Note this line requires go 1.20 or above!
			Out: p,
		})
	}
	sort.Slice(result, func(i, j int) bool {
		return result[i].In.Name() < result[j].In.Name()
	})
	return result, nil
}

func getStandardFields(eot etap.ObjectType, sot salesforce.ObjectType) ([]*conv.FieldMapping, error) {
	result := []*conv.FieldMapping{}
	if eot.IsString() || sot == salesforce.ObjectType_ContentDocumentLink {
		return nil, nil
	}
	sfs := conversionsettings.ObjectTypeMap[eot]
	eto, err := eot.Struct()
	if err != nil {
		return nil, fmt.Errorf("getting struct for %q: %w", eot, err)
	}
	for _, sf := range sfs {
		if sf != sot {
			continue
		}
		sffss, err := standardfields.StandardFieldsFromStruct(eot, eto)
		if err != nil {
			return nil, fmt.Errorf("getting standard fields from struct %q: %w", eot, err)
		}
		for _, sffs := range sffss {
			p := &etapfields.StandardField{Delegate: newPtr(sffs)}
			result = append(result, &conv.FieldMapping{
				In:  p,
				Out: p,
			})
		}
	}
	return result, nil
}

func handleImports(s string) (string, error) {
	if !strings.Contains(s, "// imports") {
		return "", fmt.Errorf("expected code to contain '// imports' comment")
	}
	imports := []string{}
	if strings.Contains(s, "time.Time") || strings.Contains(s, "time.Parse") {
		imports = append(imports, "time")
	}
	if strings.Contains(s, "fmt.") {
		imports = append(imports, "fmt")
	}
	if strings.Contains(s, "strconv.") {
		imports = append(imports, "strconv")
	}
	if strings.Contains(s, "strings.") {
		imports = append(imports, "strings")
	}
	if strings.Contains(s, "json.") {
		imports = append(imports, "encoding/json")
	}
	if strings.Contains(s, "generated.") {
		imports = append(imports, "github.com/Silicon-Ally/etap2sf/etap/generated")
	}
	if strings.Contains(s, "utils.Write") {
		imports = append(imports, "github.com/Silicon-Ally/etap2sf/utils")
	}
	if strings.Contains(s, "sfenterprise.") {
		imports = append(imports, "github.com/Silicon-Ally/etap2sf/salesforce/generated/sfenterprise")
	}
	if strings.Contains(s, "soap.") {
		imports = append(imports, "github.com/hooklift/gowsdl/soap")
	}
	for i, p := range imports {
		imports[i] = fmt.Sprintf("%q", p)
	}
	sort.Strings(imports)
	return strings.Replace(s, "// imports", fmt.Sprintf("import (\n\t%s\n)", strings.Join(imports, "\n\t")), 1), nil
}

func transformationGoCode(eot etap.ObjectType, sot salesforce.ObjectType, standard, custom []*conv.FieldMapping) (string, error) {
	out, err := sfStruct(sot)
	if err != nil {
		return "", fmt.Errorf("getting sf struct for %q: %w", sot, err)
	}
	if eot.IsString() {
		return fmt.Sprintf(`package conversion

// imports

// DO NOT MODIFY - the code in this package is auto-generated by the github.com/Silicon-Ally/etap2sf/conv/generateconverters package.

func (io *io) transformETAP%sToSalesforce%s(in string) (*%T, error) {
	out := &%T{}
	
	if err := io.manualTransformETAP%sToSalesforce%s(in, out); err != nil {
		return nil, fmt.Errorf("during manual transformation: %s", err)
	}

	return out, nil
}`, eot, sot, out, out, eot, sot, "%w"), nil
	}
	in, err := eot.Struct()
	if err != nil {
		return "", fmt.Errorf("getting etap struct for %q: %w", eot, err)
	}
	i := 0
	fieldsToGoCode := func(fields []*conv.FieldMapping) (string, error) {
		sort.Slice(fields, func(i, j int) bool {
			return fields[i].In.Name() < fields[j].In.Name()
		})
		assignments := []string{}
		for _, field := range fields {
			i++
			c, err := field.GoCode(fmt.Sprintf("tmp%d", i), sot)
			if err != nil {
				return "", fmt.Errorf("mapping %d: %w", i, err)
			}
			assignments = append(assignments, c)
		}
		return strings.Join(assignments, ""), nil
	}

	generatedCode := []string{}
	standardCode, err := fieldsToGoCode(standard)
	if err != nil {
		return "", fmt.Errorf("writing standard fields: %w", err)
	}
	if standardCode != "" {
		standardCode = "// Generated from eTapestry Data Model (from SOAP API)\n" + standardCode
		generatedCode = append(generatedCode, standardCode)
	}
	customCode, err := fieldsToGoCode(custom)
	if err != nil {
		return "", fmt.Errorf("writing custom fields: %w", err)
	}
	if customCode != "" {
		customCode = "\t// Generated from eTapestry Defined Fields\n" + customCode
		generatedCode = append(generatedCode, customCode)
	}

	return fmt.Sprintf(`package conversion 

// imports

// DO NOT MODIFY - the code in this package is auto-generated by the github.com/Silicon-Ally/etap2sf/conv/generateconverters package.

func (io *io) transformETAP%sToSalesforce%s(in *%T) (*%T, error) {
	out := &%T{}

	%s

	// Custom Hook
	if err := io.manualTransformETAP%sToSalesforce%s(in, out); err != nil {
		return nil, fmt.Errorf("during manual transformation: %s", err)
	}

	return out, nil
}`, eot, sot, in, out, out, strings.Join(generatedCode, "\n"), eot, sot, "%w"), nil
}

func sfStruct(o salesforce.ObjectType) (any, error) {
	switch o {
	case salesforce.ObjectType_Account:
		return sfenterprise.Account{}, nil
	case salesforce.ObjectType_AccountSoftCredit:
		return sfenterprise.Npsp__Account_Soft_Credit__c{}, nil
	case salesforce.ObjectType_AdditionalContext:
		return sfenterprise.Etap_AdditionalContext__c{}, nil
	case salesforce.ObjectType_Affiliation:
		return sfenterprise.Npe5__Affiliation__c{}, nil
	case salesforce.ObjectType_Campaign:
		return sfenterprise.Campaign{}, nil
	case salesforce.ObjectType_Contact:
		return sfenterprise.Contact{}, nil
	case salesforce.ObjectType_ContentDocumentLink:
		return sfenterprise.ContentDocumentLink{}, nil
	case salesforce.ObjectType_ContentVersion:
		return sfenterprise.ContentVersion{}, nil
	case salesforce.ObjectType_GeneralAccountingUnit:
		return sfenterprise.Npsp__General_Accounting_Unit__c{}, nil
	case salesforce.ObjectType_Opportunity:
		return sfenterprise.Opportunity{}, nil
	case salesforce.ObjectType_Payment:
		return sfenterprise.Npe01__OppPayment__c{}, nil
	case salesforce.ObjectType_PartialSoftCredit:
		return sfenterprise.Npsp__Partial_Soft_Credit__c{}, nil
	case salesforce.ObjectType_RecurringDonation:
		return sfenterprise.Npe03__Recurring_Donation__c{}, nil
	case salesforce.ObjectType_Relationship:
		return sfenterprise.Npe4__Relationship__c{}, nil
	case salesforce.ObjectType_Task:
		return sfenterprise.Task{}, nil
	}
	return nil, fmt.Errorf("unknown object type sf-struct: %s", o)
}

func newPtr[T any](t *T) *T {
	tt := *t
	return &tt
}
